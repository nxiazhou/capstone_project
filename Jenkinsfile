pipeline {
    agent any

    options {
        ansiColor('xterm')     
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    environment {
        LANG = 'en_US.UTF-8'
        LC_ALL = 'en_US.UTF-8'
        NODE_ENV = 'production'
        CI = 'false'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üìÖ Cloning repository...'
                script {
                    try {
                        checkout scm
                        echo '‚úÖ Repository cloned successfully'
                    } catch (Exception e) {
                        echo '‚ùå Error during checkout: ${e.getMessage()}'
                        throw e
                    }
                }
            }
        }

        stage('Check if package.json changed') {
            steps {
                script {
                    try {
                        dir('bulletin-board-next') {
                            def changes = sh(script: "git diff --name-only HEAD HEAD~1", returnStdout: true).trim()
                            if (changes.contains("package.json")) {
                                echo 'üîç package.json has changed. Clearing cache...'
                                sh '''
                                    rm -rf node_modules package-lock.json .next
                                '''
                            } else {
                                echo 'üîí No changes in package.json. Skipping cache clear.'
                            }
                        }
                    } catch (Exception e) {
                        echo '‚ùå Error checking package.json changes: ${e.getMessage()}'
                        throw e
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing all dependencies...'
                script {
                    try {
                        dir('bulletin-board-next') {
                            sh '''
                                npm install --save-dev
                                echo "‚úÖ Npm dependencies installed"
                            '''
                        }
                    } catch (Exception e) {
                        echo '‚ùå Error during dependencies installation: ${e.getMessage()}'
                        throw e
                    }
                }
            }
        }

        stage('Build Project') {
            steps {
                echo 'üî® Building Next.js app...'
                script {
                    try {
                        dir('bulletin-board-next') {
                            sh 'npm run build || { echo "‚ùå Build failed"; exit 1; }'
                            echo '‚úÖ Build completed successfully'
                        }
                    } catch (Exception e) {
                        echo '‚ùå Error during build: ${e.getMessage()}'
                        throw e
                    }
                }
            }
        }

        stage('Start App for Testing') {
            steps {
                echo 'üö¶ Starting Next.js app for testing...'
                script {
                    dir('bulletin-board-next') {
                        sh '''
                            nohup npm run start > app.log 2>&1 &
                            echo "‚è≥ Waiting for port 3000 to be available..."
                            for i in {1..20}; do
                                nc -z localhost 3000 && echo "‚úÖ Port 3000 is ready" && break
                                sleep 1
                            done
                        '''
                    }
                }
            }
        }

        stage('Run Next.js App in Kubernetes') {
            steps {
                echo 'üöÄ (Placeholder) Ready to deploy to Kubernetes in the future...'
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo 'üß† Running unit tests...'
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            dir('bulletin-board-next') {
                                sh 'NODE_ENV=development npm run test || { echo "‚ùå Unit tests failed"; exit 1; }'
                                echo '‚úÖ Unit tests passed'
                            }
                        } catch (Exception e) {
                            echo '‚ùå Error running unit tests: ${e.getMessage()}'
                            throw e
                        }
                    }
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                echo 'üîÑ Running integration tests...'
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            dir('bulletin-board-next') {
                                sh '''
                                    export DISPLAY=:99
                                    nohup Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
                                    sleep 2
                                    npx cypress run || { echo "‚ùå Integration tests failed"; exit 1; }
                                '''
                                echo '‚úÖ Integration tests passed'
                            }
                        } catch (Exception e) {
                            echo '‚ùå Error running integration tests: ${e.getMessage()}'
                            throw e
                        }
                    }
                }
            }
        }

        stage('Security Scan - Snyk') {
            steps {
                echo 'üõ°Ô∏è Running Snyk scan...'
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            dir('bulletin-board-next') {
                                sh '''
                                    snyk test || { echo "‚ùå Snyk scan failed"; exit 1; }
                                '''
                                echo '‚úÖ Snyk scan completed'
                            }
                        } catch (Exception e) {
                            echo '‚ùå Error running Snyk scan: ${e.getMessage()}'
                            throw e
                        }
                    }
                }
            }
        }

        stage('Security Scan - ZAP') {
            steps {
                echo 'üï∑Ô∏è Running ZAP scan...'
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            sh '''
                                zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.disablekey=true > /dev/null &
                                sleep 5
                                curl "http://localhost:8090/JSON/ascan/action/scan/?url=http://localhost:3000"
                                sleep 15
                                curl -o zap-report.html http://localhost:8090/OTHER/core/other/htmlreport/
                            '''
                            echo '‚úÖ ZAP scan completed'
                        } catch (Exception e) {
                            echo '‚ùå Error running ZAP scan: ${e.getMessage()}'
                            throw e
                        }
                    }
                }
            }
        }

        stage('Get ECS Public IP') {
            steps {
                echo 'üåê Getting ECS public IP...'
                script {
                    def publicIp = sh(script: "curl -s ifconfig.me", returnStdout: true).trim()
                    def url = publicIp + ":3000"
                    echo "The URL with port is: ${url}"
                }
            }
        }
    }
}